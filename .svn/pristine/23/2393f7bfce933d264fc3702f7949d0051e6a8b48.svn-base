using UnityEngine;
using System.Collections;

public class AsteroidScript : MonoBehaviour {
	
	public int maxMins = 3500;
	public int minMins = 1000;
	public int startingMins;
	public int currentMins;
	
	private Texture2D texClone;
    private Renderer render;
    private int[] grayInterval;
    private bool[] intervalDone;
    private Color[] grayScaleGoal;

	// Use this for initialization
	void Start () {
        grayInterval = new int[20];
        intervalDone = new bool[20];
        grayInterval[0] = 0;
        
        render = GetComponent<Renderer>();
		currentMins = Random.Range( minMins, maxMins );
		startingMins = currentMins;
		float size = (float)( (float)( (float)( currentMins - 1000 ) / 2500 ) * 0.30f ) + 0.2f;
		transform.localScale = new Vector3( size, size, size );

        for( int i = 1; i <= 19; i++ )
        {
            grayInterval[i] = grayInterval[i-1] + ( startingMins / 20 );
        }

        texClone = (Texture2D)Instantiate( render.material.mainTexture );
        render.material.mainTexture = texClone;
        Color[] texColors = texClone.GetPixels();
        grayScaleGoal = texColors;
        for( int i = 0; i < texColors.Length; i++ )
        {
            float grayScaleValue = texColors[i].grayscale;
            grayScaleGoal[i] = new Color( grayScaleValue, grayScaleValue, grayScaleValue, texColors[i].a );
        }
	}
	
	// Update is called once per frame
    void Update()
    {
        for( int i = 19; i >= 0; i-- )
        {
            if( ( currentMins <= grayInterval[i] ) && ( !intervalDone[i] ) )
            {
                SetGrayness( texClone, i );
                intervalDone[i] = true;
                break;
            }
        }
    }

    void SetGrayness( Texture2D texture, int interval )
    {
        Color[] texColors = texture.GetPixels();
        float grayValue = (float)grayInterval[interval] / startingMins;
        for( int i = 0; i < texColors.Length; i++ )
        {
            texColors[i] = new Color( ( ( texColors[i].r - grayScaleGoal[i].r ) * grayValue ) + grayScaleGoal[i].r, ( ( texColors[i].g - grayScaleGoal[i].g ) * grayValue ) + grayScaleGoal[i].g, ( ( texColors[i].b - grayScaleGoal[i].b ) * grayValue ) + grayScaleGoal[i].b, texColors[i].a );
        }

        texture.SetPixels( texColors );
        texture.Apply();
    }
}
