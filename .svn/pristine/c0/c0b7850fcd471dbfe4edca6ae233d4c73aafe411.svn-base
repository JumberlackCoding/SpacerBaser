using UnityEngine;
using System.Collections;

public class WormHeadScript : MonoBehaviour {
	
	public float wormFeedSpeed;
	public float moveSpeed;
	public float willingTravelDistance;
	
	public int maxHealth;
	public int mineralConsumption;
	
	
	
	private int health;
	
	private float rangeFromTarget;
	
	private GameObject targetAsteroid;
	
	private Vector3 targetLocation;
	
	private bool begunFeeding = false;
	private bool haveTarget = false;
	
	
	// Use this for initialization
	void Start () {
	
	}
	
	// Update is called once per frame
	void Update () {
	
	}
	
	protected virtual IEnumerator PulseAction()
	{
		while( true )
		{
			yield return new WaitForSeconds( wormFeedSpeed );
            
        }
    }
    
	protected virtual void MoveToTarget()
	{
		rangeFromTarget = Vector3.Distance( transform.position, targetLocation );
		
		if( !begunFeeding )
		{
			//			inRange = false;
//			float distanceCovered = ( Time.time - startTime ) * moveSpeed;
//			float journeyFraction = ( distanceCovered / totalDistance );
//			transform.position = Vector3.Lerp( transform.position, targetLocation, ( moveSpeed * Time.deltaTime ) / ( totalDistance - distanceCovered ) );
//			
//			float angle = Mathf.Atan2( targetLocation.y - transform.position.y, targetLocation.x - transform.position.x ) * Mathf.Rad2Deg;
//			transform.rotation = Quaternion.AngleAxis( angle, Vector3.forward);
        }
        
        else
        {
            begunFeeding = true;
        }
    }
    
	protected virtual GameObject AcquireTarget()
	{
		// get all astgeroids
		GameObject[] asteroids = GameObject.FindGameObjectsWithTag( "Asteroid" );
		GameObject[] asteroids2 = new GameObject[asteroids.Length];
		
		GameObject tempTarget = null;
		
		bool targetsValid = false;
		
		// Loop through all asteroids and check if the asteroid is within the distance willing to travel
		for( int t = 0; t < asteroids.Length; t++ )
		{
			Vector3 tempLoc = asteroids[t].transform.position;
			float distance = Vector3.Distance( transform.position, tempLoc );
			AsteroidScript tempScript = asteroids[t].GetComponent<AsteroidScript>();
            
            if ( ( distance < willingTravelDistance ) && ( tempScript.currentMins == tempScript.maxMins ) )
            {
                asteroids2[t] = asteroids[t];
                targetsValid = true;
            }
        }
        
        // now pick a random one to go to
        if( targetsValid )
        {
	        while( !haveTarget )
	        {
	        	tempTarget = asteroids2[(int)Random.Range(0, asteroids2.Length+1)];
	        	if( tempTarget != null )
	        	{
	        		haveTarget = true;
	        	}
	        }
		}        
        
        return tempTarget;
    }
    
	public virtual void TakeDamage( int damage )
	{
		health -= damage;
    }
    
	public virtual void Die()
	{
		Destroy( gameObject );
    }
}
