using UnityEngine;
using System.Collections;

public class Turret_Basic : GenericStructureScript {

	private bool needScript = true;
	private bool fired = false;
	private bool closerTarget = false;
    private WormHeadScript targetWormScript;

	// Use this for initialization
	void Start () {
		Initialize();
		StartCoroutine( PulseAction() );
	}
	
	// Update is called once per frame
	void Update () {
		if( !built )
		{
			Build();
		}
		else
		{
			if( ( target == null ) || ( closerTarget == true ) )
			{
				inRange = false;
				needScript = true;
				target = AcquireTarget();
				closerTarget = false;
			}
			CheckInRange();
			if( target != null )
			{
				targetLocation = target.transform.position;
				if( needScript )
				{
                    if( target.name == "WURMHEAD(Clone)" )
                    {
                        targetWormScript = target.GetComponent<WormHeadScript>();
                    }
                    else
                    {
                        targetScript = target.GetComponent<GenericEnemyScript>();
                    }
					needScript = false;
				}
				closerTarget = CheckForCloserTarget();
			}
		}
		if( health <= 0 )
		{
			Die( false, 0 );
		}
	}

	protected override IEnumerator PulseAction()
	{
		float beamLife = 0.2f;
		
		while( true )
		{
			if( built )
			{
				currentPower = powerManager.GetTurretPower( gameObject );
				
				if( inRange && ( target != null ) && !fired )
				{
					if( currentPower >= powerConsumption )
					{
						powerManager.ConsumeTurretPower( gameObject, powerConsumption );
                        if( targetScript )
                        {
                            targetScript.TakeDamage( damage );
                        }
                        else if( targetWormScript )
                        {
                            targetWormScript.TakeDamage( damage );
                        }
						DrawBeam();
						fired = true;
					}
				}
				
				yield return new WaitForSeconds( beamLife );
				
				if( beamObj && fired )
				{
					DestroyBeam();
					fired = false;
				}
				
				yield return new WaitForSeconds( attackSpeed - beamLife );
			}
			else
			{
				yield return new WaitForSeconds( 0.1f );
			}
		}
	}
	
	private bool CheckForCloserTarget()
	{
		bool yaynay = false;
		
		// Set closest distance to current target's position
		float closest = Vector3.Distance( transform.position, targetLocation );
		
		// Get all enemies
		GameObject[] enemies = GameObject.FindGameObjectsWithTag( "Enemy" );
        GameObject[] wurms = GameObject.FindGameObjectsWithTag( "Wurm" );
		
		// Loop through all the enemies
		for( int t = 0; t < enemies.Length; t++ )
		{
			Vector3 tempLoc = enemies[t].transform.position;
			float distance = Vector3.Distance( transform.position, tempLoc );
			
			if ( distance < closest )
			{
				yaynay = true;
				break;
			}
		}
        if( yaynay == false )
        {
            for( int t = 0; t < wurms.Length; t++ )
            {
                Vector3 tempLoc = wurms[t].transform.position;
                float distance = Vector3.Distance( transform.position, tempLoc );

                if( distance < closest )
                {
                    yaynay = true;
                    break;
                }
            }
        }
		
		return yaynay;
	}
	
	public bool AbleToAttack()
	{
		bool result = false;
		if( inRange && ( target != null ) )
		{
			result = true;
		}
		
		return result;
	}
	
	public override void StructureFunction()
	{
//		StartCoroutine( PulseAction() );
	}
}
